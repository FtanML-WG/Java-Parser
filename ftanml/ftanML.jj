 /**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  STATIC = false;  CHOICE_AMBIGUITY_CHECK = 2;  OTHER_AMBIGUITY_CHECK = 1;  ERROR_REPORTING = true;  JAVA_UNICODE_ESCAPE = false;  UNICODE_INPUT = true;  SANITY_CHECK = true;}PARSER_BEGIN(FtanML)package ftanml;import ftanml.objects.*;public class FtanML{  public static void main(String args []) throws ParseException  {    FtanML parser = new FtanML(System.in);    while (true)    {      System.out.println(parser.Value().toFtanML());    }  }}PARSER_END(FtanML)SKIP :{  " "| "\n"| "\r"| "\t"}/*
Handling Number Values
*/TOKEN :{  < NUMBER :    ("-")?    (      "0"    | [ "1"-"9" ] (< DIGIT >)*    )    (      "." (< DIGIT >)+    )?    (      (        "e"      | "E"      )      (        "+"      | "-"      )?      (< DIGIT >)+    )? >}TOKEN :{  < #DIGIT : [ "0"-"9" ] >}/*
Handling null value
*/TOKEN :{  < NULL : "null" >}/*
Handling Boolean Values
*/TOKEN :{  < BOOLEAN :    "true"  | "false" >}/*
Handling Strings
*/TOKEN :{  < SQ_STRING_START : "'" > : SQ_STRING}TOKEN :{  < DQ_STRING_START : "\"" > : DQ_STRING}TOKEN :{  < #ESCAPESEQ :    (      "\\"      (        [ "\"", "'", "\\", "/", "b", "f", "n", "r", "t", ">", "<" ]      | "u" (< HEXDIGIT >)        {          4        }      )    ) >}TOKEN :{  < #HEXDIGIT :    (      [ "0"-"9" ]    | [ "A"-"F" ]    | [ "a"-"f" ]    ) >}< SQ_STRING >TOKEN :{  < SQ_CHARACTER :    (~[ "'", "\\", "\b", "\f", "\n", "\r", "\t" ])  | < ESCAPESEQ > >}< SQ_STRING >TOKEN :{  < SQ_STRING_END : "'" > : DEFAULT}< DQ_STRING >TOKEN :{  < DQ_CHARACTER :    (~[ "\"", "\\", "\b", "\f", "\n", "\r", "\t" ])  | < ESCAPESEQ > >}< DQ_STRING >TOKEN :{  < DQ_STRING_END : "\"" > : DEFAULT}/*
Handling arrays
*/TOKEN :{  < ARRAY_START : "[" >}TOKEN :{  < ARRAY_SEPARATOR : "," >}TOKEN :{  < ARRAY_END : "]" >}/*
Handling elements
*/TOKEN_MGR_DECLS :{  static java.util.Stack < Integer > nested = new java.util.Stack < Integer > ();  static  {    nested.push(DEFAULT);  }}TOKEN :{  < ELEMENT_START : "<" >  {    nested.push(DEFAULT);    SwitchTo(nested.peek());  }}TOKEN :{  < ELEMENT_END : ">" >  {    nested.pop();    SwitchTo(nested.peek());  }}TOKEN :{  < ELEMENT_KEYVALUESEPARATOR : "=" >}TOKEN :{  < NAME : < FIRSTNAMECHARACTER > (< NAMECHARACTER >)* >}TOKEN :{  < #FIRSTNAMECHARACTER :    (      [ "a"-"z" ]    | [ "A"-"Z" ]    ) >}TOKEN :{  < #NAMECHARACTER :    < FIRSTNAMECHARACTER >  | [ "0"-"9" ]  | ":"  | "_" >}TOKEN :{  < ELEMENT_CONTENTSEPARATOR : "|" >  {    nested.pop();    nested.push(CONTENT);    SwitchTo(nested.peek());  }}< CONTENT >SPECIAL_TOKEN :{  < NESTEDELEMENT_END : ">" >  {    input_stream.backup(1);    SwitchTo(DEFAULT);  }}< CONTENT >SPECIAL_TOKEN :{  < NESTEDELEMENT_START : "<" >  {    input_stream.backup(1);    SwitchTo(DEFAULT);  }}< CONTENT >TOKEN :{  < CONTENTCHAR :    (~[ "\\", "<", ">" ])  |    (      "\\"      (        [ "\"", "'", "\\", "/", "b", "f", "n", "r", "t", "<", ">" ]      | "u" (< HEXDIGIT >)        {          4        }      )    ) >}FtanValue Value() :{  FtanValue result;}{  (    result = Literal()  | result = Array()  | result = Element()  )  {    return result;  }}FtanNull Null() :{}{  < NULL >  {    return new FtanNull();  }}FtanValue Literal() :{  FtanValue result;}{  (    result = Number()  | result = Boolean()  | result = String()  | result = Null()  )  {    return result;  }}FtanNumber Number() :{}{  < NUMBER >  {    return new FtanNumber(Double.parseDouble(token.image));  }}FtanBoolean Boolean() :{}{  < BOOLEAN >  {    return new FtanBoolean(Boolean.parseBoolean(token.image));  }}FtanString Name() :{}{  < NAME >  {    return new FtanString(token.image);  }}FtanString String() :{  Token t;  String result = new String();}{  (    < SQ_STRING_START >    (      t = < SQ_CHARACTER >      {        result = result + FtanString.deescapeChar(t.image);      }    )*    < SQ_STRING_END >  | < DQ_STRING_START >    (      t = < DQ_CHARACTER >      {        result = result + FtanString.deescapeChar(t.image);      }    )*    < DQ_STRING_END >  )  {    return new FtanString(result);  }}FtanArray Array() :{  java.util.List < FtanValue > values = new java.util.ArrayList < FtanValue > ();  FtanValue current;}{  < ARRAY_START >  (    current = Value()    {      values.add(current);    }    (      < ARRAY_SEPARATOR > current = Value()      {        values.add(current);      }    )*  )?  < ARRAY_END >  {    return new FtanArray(values);  }}java.util.Map.Entry < FtanString, FtanValue > KeyValuePair() :{  FtanString key;  FtanValue value;}{  (    key = String()  | key = Name()  )  "=" value = Value()  {    return new java.util.AbstractMap.SimpleImmutableEntry < FtanString, FtanValue > (key, value);  }}java.util.Map.Entry < FtanString, FtanValue > FirstKeyValuePair() :{  FtanString key;  FtanValue value = null;}{  (    key = String()  | key = Name()  )  (    "=" value = Value()  )?  {    return new java.util.AbstractMap.SimpleImmutableEntry < FtanString, FtanValue > (key, value);  }}FtanArray Content() :{  java.util.ArrayList < FtanValue > values = new java.util.ArrayList < FtanValue > ();  FtanValue current;  String currentStr = new String();}{  (    (      < CONTENTCHAR >      {        currentStr = currentStr + FtanString.deescapeChar(token.image);      }    )  | current = Element()    {      if (currentStr.length() > 0)      {        values.add(new FtanString(currentStr));        currentStr = new String();      }      values.add(current);    }  )*  {    if (currentStr.length() > 0)    {      values.add(new FtanString(currentStr));      currentStr = new String();    }    return new FtanArray(values);  }}FtanElement Element() :{  java.util.LinkedHashMap < FtanString, FtanValue > attributes = new java.util.LinkedHashMap < FtanString, FtanValue > ();  java.util.Map.Entry < FtanString, FtanValue > currentAttribute;  FtanArray content;}{  < ELEMENT_START >  (    (      currentAttribute = FirstKeyValuePair()      {        if (currentAttribute.getValue() == null) attributes.put(FtanElement.NAME_KEY, currentAttribute.getKey());        else attributes.put(currentAttribute.getKey(), currentAttribute.getValue());      }    )    (      currentAttribute = KeyValuePair()      {        attributes.put(currentAttribute.getKey(), currentAttribute.getValue());      }    )*  )?  (    < ELEMENT_CONTENTSEPARATOR > content = Content()    {      attributes.put(FtanElement.CONTENT_KEY, content);    }  )?  < ELEMENT_END >  {    return new FtanElement(attributes);  }}
